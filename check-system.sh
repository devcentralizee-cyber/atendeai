#!/bin/bash

# Script de Verifica√ß√£o do Sistema Atendechat
# Verifica se todos os componentes est√£o funcionando corretamente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Vari√°veis
INSTALL_DIR="/opt/atendechat"
USER_NAME="atendechat"

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERRO] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[AVISO] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

fail() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se a instala√ß√£o existe
check_installation() {
    echo "üîç Verificando instala√ß√£o..."
    echo "=========================="
    
    if [[ -d "$INSTALL_DIR" ]]; then
        success "Diret√≥rio de instala√ß√£o encontrado: $INSTALL_DIR"
    else
        fail "Diret√≥rio de instala√ß√£o n√£o encontrado: $INSTALL_DIR"
        return 1
    fi
    
    if [[ -f "$INSTALL_DIR/backend/.env" ]]; then
        success "Arquivo de configura√ß√£o do backend encontrado"
    else
        fail "Arquivo de configura√ß√£o do backend n√£o encontrado"
        return 1
    fi
    
    if [[ -f "$INSTALL_DIR/frontend/.env" ]]; then
        success "Arquivo de configura√ß√£o do frontend encontrado"
    else
        fail "Arquivo de configura√ß√£o do frontend n√£o encontrado"
        return 1
    fi
    
    echo ""
}

# Verificar depend√™ncias do sistema
check_system_dependencies() {
    echo "üîß Verificando depend√™ncias do sistema..."
    echo "========================================"
    
    # Node.js
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version)
        success "Node.js instalado: $NODE_VERSION"
    else
        fail "Node.js n√£o est√° instalado"
    fi
    
    # NPM
    if command -v npm &> /dev/null; then
        NPM_VERSION=$(npm --version)
        success "NPM instalado: $NPM_VERSION"
    else
        fail "NPM n√£o est√° instalado"
    fi
    
    # PostgreSQL
    if command -v psql &> /dev/null; then
        PG_VERSION=$(sudo -u postgres psql --version)
        success "PostgreSQL instalado: $PG_VERSION"
    else
        fail "PostgreSQL n√£o est√° instalado"
    fi
    
    # Redis
    if command -v redis-server &> /dev/null; then
        REDIS_VERSION=$(redis-server --version)
        success "Redis instalado: $REDIS_VERSION"
    else
        fail "Redis n√£o est√° instalado"
    fi
    
    # Nginx
    if command -v nginx &> /dev/null; then
        NGINX_VERSION=$(nginx -v 2>&1)
        success "Nginx instalado: $NGINX_VERSION"
    else
        fail "Nginx n√£o est√° instalado"
    fi
    
    # PM2
    if command -v pm2 &> /dev/null; then
        PM2_VERSION=$(pm2 --version)
        success "PM2 instalado: $PM2_VERSION"
    else
        fail "PM2 n√£o est√° instalado"
    fi
    
    echo ""
}

# Verificar status dos servi√ßos
check_services_status() {
    echo "üîÑ Verificando status dos servi√ßos..."
    echo "===================================="
    
    # PostgreSQL
    if systemctl is-active --quiet postgresql; then
        success "PostgreSQL est√° rodando"
    else
        fail "PostgreSQL n√£o est√° rodando"
    fi
    
    # Redis
    if systemctl is-active --quiet redis-server; then
        success "Redis est√° rodando"
    else
        fail "Redis n√£o est√° rodando"
    fi
    
    # Nginx
    if systemctl is-active --quiet nginx; then
        success "Nginx est√° rodando"
    else
        fail "Nginx n√£o est√° rodando"
    fi
    
    echo ""
}

# Verificar aplica√ß√£o PM2
check_pm2_application() {
    echo "üì± Verificando aplica√ß√£o PM2..."
    echo "==============================="
    
    if sudo -u $USER_NAME pm2 list | grep -q "atendechat-backend"; then
        PM2_STATUS=$(sudo -u $USER_NAME pm2 list | grep "atendechat-backend" | awk '{print $10}')
        if [[ "$PM2_STATUS" == "online" ]]; then
            success "Backend est√° rodando no PM2"
        else
            fail "Backend n√£o est√° online no PM2 (Status: $PM2_STATUS)"
        fi
    else
        fail "Backend n√£o encontrado no PM2"
    fi
    
    echo ""
}

# Verificar conectividade
check_connectivity() {
    echo "üåê Verificando conectividade..."
    echo "=============================="
    
    # Backend
    if curl -f -s http://localhost:8080/api/auth/refresh > /dev/null 2>&1; then
        success "Backend est√° respondendo (porta 8080)"
    else
        fail "Backend n√£o est√° respondendo (porta 8080)"
    fi
    
    # Frontend (se Nginx estiver configurado)
    if curl -f -s http://localhost:80 > /dev/null 2>&1; then
        success "Frontend est√° respondendo (porta 80)"
    else
        warning "Frontend n√£o est√° respondendo (porta 80) - pode ser normal se SSL estiver configurado"
    fi
    
    # HTTPS (se configurado)
    if [[ -f "$INSTALL_DIR/backend/.env" ]]; then
        DOMAIN=$(grep "FRONTEND_URL" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2 | sed 's/https:\/\///')
        if [[ -n "$DOMAIN" ]]; then
            if curl -f -s "https://$DOMAIN" > /dev/null 2>&1; then
                success "HTTPS est√° funcionando para $DOMAIN"
            else
                warning "HTTPS n√£o est√° respondendo para $DOMAIN"
            fi
        fi
    fi
    
    echo ""
}

# Verificar banco de dados
check_database() {
    echo "üóÑÔ∏è  Verificando banco de dados..."
    echo "================================"
    
    if [[ -f "$INSTALL_DIR/backend/.env" ]]; then
        DB_NAME=$(grep "DB_NAME" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2)
        DB_USER=$(grep "DB_USER" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2)
        
        # Verificar se o banco existe
        if sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
            success "Banco de dados '$DB_NAME' existe"
        else
            fail "Banco de dados '$DB_NAME' n√£o existe"
        fi
        
        # Verificar se o usu√°rio existe
        if sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER'" | grep -q 1; then
            success "Usu√°rio do banco '$DB_USER' existe"
        else
            fail "Usu√°rio do banco '$DB_USER' n√£o existe"
        fi
        
        # Verificar conex√£o
        if sudo -u postgres psql -d "$DB_NAME" -c "SELECT 1;" > /dev/null 2>&1; then
            success "Conex√£o com o banco de dados est√° funcionando"
        else
            fail "N√£o foi poss√≠vel conectar ao banco de dados"
        fi
    fi
    
    echo ""
}

# Verificar Redis
check_redis() {
    echo "üîÑ Verificando Redis..."
    echo "======================"
    
    if redis-cli ping > /dev/null 2>&1; then
        success "Redis est√° respondendo"
    else
        # Tentar com senha
        if [[ -f "$INSTALL_DIR/backend/.env" ]]; then
            REDIS_PASS=$(grep "REDIS_URI" "$INSTALL_DIR/backend/.env" | cut -d':' -f3 | cut -d'@' -f1)
            if [[ -n "$REDIS_PASS" ]]; then
                if redis-cli -a "$REDIS_PASS" ping > /dev/null 2>&1; then
                    success "Redis est√° respondendo (com autentica√ß√£o)"
                else
                    fail "Redis n√£o est√° respondendo"
                fi
            else
                fail "Redis n√£o est√° respondendo"
            fi
        else
            fail "Redis n√£o est√° respondendo"
        fi
    fi
    
    echo ""
}

# Verificar certificados SSL
check_ssl_certificates() {
    echo "üîí Verificando certificados SSL..."
    echo "================================="
    
    if [[ -f "$INSTALL_DIR/backend/.env" ]]; then
        DOMAIN=$(grep "FRONTEND_URL" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2 | sed 's/https:\/\///')
        
        if [[ -n "$DOMAIN" ]]; then
            if [[ -d "/etc/letsencrypt/live/$DOMAIN" ]]; then
                # Verificar validade do certificado
                CERT_EXPIRY=$(openssl x509 -enddate -noout -in "/etc/letsencrypt/live/$DOMAIN/cert.pem" | cut -d= -f2)
                success "Certificado SSL existe para $DOMAIN"
                info "Expira em: $CERT_EXPIRY"
                
                # Verificar se expira em menos de 30 dias
                if openssl x509 -checkend 2592000 -noout -in "/etc/letsencrypt/live/$DOMAIN/cert.pem" > /dev/null; then
                    success "Certificado SSL v√°lido por mais de 30 dias"
                else
                    warning "Certificado SSL expira em menos de 30 dias!"
                fi
            else
                warning "Certificado SSL n√£o encontrado para $DOMAIN"
            fi
        fi
    fi
    
    echo ""
}

# Verificar logs por erros
check_logs_for_errors() {
    echo "üìã Verificando logs por erros..."
    echo "==============================="
    
    # Logs do PM2
    if [[ -d "$INSTALL_DIR/logs" ]]; then
        ERROR_COUNT=$(grep -c "ERROR\|Error\|error" "$INSTALL_DIR/logs"/*.log 2>/dev/null | awk -F: '{sum += $2} END {print sum}' || echo "0")
        if [[ "$ERROR_COUNT" -gt 0 ]]; then
            warning "Encontrados $ERROR_COUNT erros nos logs do PM2"
        else
            success "Nenhum erro encontrado nos logs do PM2"
        fi
    fi
    
    # Logs do Nginx
    if [[ -f "/var/log/nginx/error.log" ]]; then
        NGINX_ERRORS=$(tail -n 100 /var/log/nginx/error.log | grep -c "error" || echo "0")
        if [[ "$NGINX_ERRORS" -gt 0 ]]; then
            warning "Encontrados $NGINX_ERRORS erros recentes no Nginx"
        else
            success "Nenhum erro recente no Nginx"
        fi
    fi
    
    echo ""
}

# Verificar espa√ßo em disco
check_disk_space() {
    echo "üíæ Verificando espa√ßo em disco..."
    echo "================================"
    
    DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [[ "$DISK_USAGE" -lt 80 ]]; then
        success "Espa√ßo em disco OK ($DISK_USAGE% usado)"
    elif [[ "$DISK_USAGE" -lt 90 ]]; then
        warning "Espa√ßo em disco baixo ($DISK_USAGE% usado)"
    else
        fail "Espa√ßo em disco cr√≠tico ($DISK_USAGE% usado)"
    fi
    
    echo ""
}

# Verificar mem√≥ria
check_memory() {
    echo "üß† Verificando uso de mem√≥ria..."
    echo "==============================="
    
    MEMORY_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
    
    if [[ "$MEMORY_USAGE" -lt 80 ]]; then
        success "Uso de mem√≥ria OK ($MEMORY_USAGE% usado)"
    elif [[ "$MEMORY_USAGE" -lt 90 ]]; then
        warning "Uso de mem√≥ria alto ($MEMORY_USAGE% usado)"
    else
        fail "Uso de mem√≥ria cr√≠tico ($MEMORY_USAGE% usado)"
    fi
    
    echo ""
}

# Gerar relat√≥rio de sa√∫de
generate_health_report() {
    echo "üìä Relat√≥rio de Sa√∫de do Sistema"
    echo "==============================="
    echo ""
    echo "Data: $(date)"
    echo "Servidor: $(hostname)"
    echo "Sistema: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
    echo "Uptime: $(uptime -p)"
    echo ""
    
    # Resumo dos servi√ßos
    echo "Status dos Servi√ßos:"
    echo "-------------------"
    systemctl is-active postgresql && echo "‚úÖ PostgreSQL" || echo "‚ùå PostgreSQL"
    systemctl is-active redis-server && echo "‚úÖ Redis" || echo "‚ùå Redis"
    systemctl is-active nginx && echo "‚úÖ Nginx" || echo "‚ùå Nginx"
    sudo -u $USER_NAME pm2 list | grep -q "online" && echo "‚úÖ Backend (PM2)" || echo "‚ùå Backend (PM2)"
    echo ""
}

# Menu principal
show_menu() {
    echo ""
    echo "üîç Verificador do Sistema Atendechat"
    echo "===================================="
    echo ""
    echo "1. Verifica√ß√£o completa"
    echo "2. Verificar apenas servi√ßos"
    echo "3. Verificar apenas conectividade"
    echo "4. Verificar apenas banco de dados"
    echo "5. Gerar relat√≥rio de sa√∫de"
    echo "6. Monitoramento cont√≠nuo"
    echo "0. Sair"
    echo ""
    
    read -p "Escolha uma op√ß√£o (0-6): " -n 1 -r
    echo
    
    case $REPLY in
        1)
            full_check
            ;;
        2)
            check_services_status
            check_pm2_application
            ;;
        3)
            check_connectivity
            ;;
        4)
            check_database
            check_redis
            ;;
        5)
            generate_health_report
            ;;
        6)
            continuous_monitoring
            ;;
        0)
            echo "üëã Saindo..."
            exit 0
            ;;
        *)
            error "Op√ß√£o inv√°lida"
            ;;
    esac
}

# Verifica√ß√£o completa
full_check() {
    check_installation
    check_system_dependencies
    check_services_status
    check_pm2_application
    check_connectivity
    check_database
    check_redis
    check_ssl_certificates
    check_logs_for_errors
    check_disk_space
    check_memory
    
    echo "üéØ Verifica√ß√£o completa finalizada!"
    echo ""
}

# Monitoramento cont√≠nuo
continuous_monitoring() {
    echo "üîÑ Iniciando monitoramento cont√≠nuo (Ctrl+C para parar)..."
    echo ""
    
    while true; do
        clear
        echo "üîÑ Monitoramento Cont√≠nuo - $(date)"
        echo "=================================="
        echo ""
        
        check_services_status
        check_connectivity
        check_disk_space
        check_memory
        
        sleep 30
    done
}

# Fun√ß√£o principal
main() {
    if [[ $# -eq 0 ]]; then
        show_menu
    else
        case $1 in
            --full)
                full_check
                ;;
            --services)
                check_services_status
                check_pm2_application
                ;;
            --connectivity)
                check_connectivity
                ;;
            --database)
                check_database
                check_redis
                ;;
            --report)
                generate_health_report
                ;;
            *)
                echo "Uso: $0 [--full|--services|--connectivity|--database|--report]"
                exit 1
                ;;
        esac
    fi
}

# Executar fun√ß√£o principal
main "$@"
