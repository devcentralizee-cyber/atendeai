version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: centralizee-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-atendechat}
      POSTGRES_USER: ${DB_USER:-atendechat}
      POSTGRES_PASSWORD: ${DB_PASS:-atendechat123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-atendechat} -d ${DB_NAME:-atendechat}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - centralizee-network

  # Redis para cache e filas
  redis:
    image: redis:7-alpine
    container_name: centralizee-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASS:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - centralizee-network

  # Migração do banco de dados
  migration:
    build:
      context: ./backend
      dockerfile: Dockerfile.sqlsetup
    container_name: centralizee-migration
    environment:
      DB_DIALECT: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-atendechat}
      DB_USER: ${DB_USER:-atendechat}
      DB_PASS: ${DB_PASS:-atendechat123}
      DB_DEBUG: ${DB_DEBUG:-false}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - centralizee-network
    restart: "no"

  # Backend da aplicação
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: centralizee-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 8080
      BACKEND_URL: ${BACKEND_URL:-http://localhost:8080}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      PROXY_PORT: ${PROXY_PORT:-443}
      
      # Database
      DB_DIALECT: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-atendechat}
      DB_PASS: ${DB_PASS:-atendechat123}
      DB_NAME: ${DB_NAME:-atendechat}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-kZaOTd+YZpjRUyyuQUpigJaEMk4vcW4YOymKPZX0Ts8=}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dBSXqFg9TaNUEDXVp6fhMTRLBysP+j2DSqf7+raxD3A=}
      
      # Redis
      REDIS_URI: redis://:${REDIS_PASS:-redis123}@redis:6379
      REDIS_OPT_LIMITER_MAX: ${REDIS_OPT_LIMITER_MAX:-1}
      REDIS_OPT_LIMITER_DURATION: ${REDIS_OPT_LIMITER_DURATION:-3000}
      
      # Limits
      USER_LIMIT: ${USER_LIMIT:-10000}
      CONNECTIONS_LIMIT: ${CONNECTIONS_LIMIT:-100000}
      CLOSED_SEND_BY_ME: ${CLOSED_SEND_BY_ME:-true}
      
      # Email
      MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      MAIL_USER: ${MAIL_USER:-}
      MAIL_PASS: ${MAIL_PASS:-}
      MAIL_FROM: ${MAIL_FROM:-}
      MAIL_PORT: ${MAIL_PORT:-465}
      
      # Gerencianet (opcional)
      GERENCIANET_SANDBOX: ${GERENCIANET_SANDBOX:-false}
      GERENCIANET_CLIENT_ID: ${GERENCIANET_CLIENT_ID:-}
      GERENCIANET_CLIENT_SECRET: ${GERENCIANET_CLIENT_SECRET:-}
      GERENCIANET_PIX_CERT: ${GERENCIANET_PIX_CERT:-}
      GERENCIANET_PIX_KEY: ${GERENCIANET_PIX_KEY:-}
    volumes:
      - backend_public:/app/public
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - centralizee-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/auth/refresh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend da aplicação
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: centralizee-frontend
    restart: unless-stopped
    environment:
      REACT_APP_BACKEND_URL: ${BACKEND_URL:-http://localhost:8080}
      REACT_APP_HOURS_CLOSE_TICKETS_AUTO: ${REACT_APP_HOURS_CLOSE_TICKETS_AUTO:-24}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    networks:
      - centralizee-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_public:
    driver: local

networks:
  centralizee-network:
    driver: bridge
