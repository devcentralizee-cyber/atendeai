#!/bin/bash

# Script de Atualiza√ß√£o do Atendechat
# Atualiza o sistema mantendo as configura√ß√µes

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Vari√°veis
INSTALL_DIR="/opt/atendechat"
USER_NAME="atendechat"
BACKUP_DIR="/opt/atendechat-backup-$(date +%Y%m%d_%H%M%S)"

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERRO] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[AVISO] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Verificar se a instala√ß√£o existe
check_installation() {
    if [[ ! -d "$INSTALL_DIR" ]]; then
        error "Atendechat n√£o est√° instalado em $INSTALL_DIR"
    fi
    
    if [[ ! -f "$INSTALL_DIR/backend/.env" ]]; then
        error "Arquivo de configura√ß√£o n√£o encontrado"
    fi
    
    log "Instala√ß√£o encontrada em $INSTALL_DIR"
}

# Fazer backup das configura√ß√µes
backup_configs() {
    log "Fazendo backup das configura√ß√µes..."
    
    sudo mkdir -p "$BACKUP_DIR"
    
    # Backup dos arquivos .env
    sudo cp "$INSTALL_DIR/backend/.env" "$BACKUP_DIR/backend.env"
    sudo cp "$INSTALL_DIR/frontend/.env" "$BACKUP_DIR/frontend.env"
    
    # Backup da pasta public (arquivos enviados)
    if [[ -d "$INSTALL_DIR/backend/public" ]]; then
        sudo cp -r "$INSTALL_DIR/backend/public" "$BACKUP_DIR/"
    fi
    
    # Backup do banco de dados
    DB_NAME=$(grep "DB_NAME" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2)
    DB_USER=$(grep "DB_USER" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2)
    
    sudo -u postgres pg_dump "$DB_NAME" > "$BACKUP_DIR/database.sql"
    
    log "Backup criado em: $BACKUP_DIR"
}

# Parar servi√ßos
stop_services() {
    log "Parando servi√ßos..."
    
    # Parar PM2
    sudo -u $USER_NAME pm2 stop all || true
    
    log "Servi√ßos parados"
}

# Atualizar c√≥digo
update_code() {
    log "Atualizando c√≥digo do GitHub..."
    
    cd "$INSTALL_DIR"
    
    # Fazer stash das mudan√ßas locais
    sudo -u $USER_NAME git stash
    
    # Atualizar c√≥digo
    sudo -u $USER_NAME git pull origin main
    
    log "C√≥digo atualizado"
}

# Restaurar configura√ß√µes
restore_configs() {
    log "Restaurando configura√ß√µes..."
    
    # Restaurar arquivos .env
    sudo cp "$BACKUP_DIR/backend.env" "$INSTALL_DIR/backend/.env"
    sudo cp "$BACKUP_DIR/frontend.env" "$INSTALL_DIR/frontend/.env"
    
    # Restaurar pasta public se n√£o existir
    if [[ ! -d "$INSTALL_DIR/backend/public" && -d "$BACKUP_DIR/public" ]]; then
        sudo cp -r "$BACKUP_DIR/public" "$INSTALL_DIR/backend/"
    fi
    
    # Ajustar permiss√µes
    sudo chown -R $USER_NAME:$USER_NAME "$INSTALL_DIR"
    
    log "Configura√ß√µes restauradas"
}

# Atualizar depend√™ncias
update_dependencies() {
    log "Atualizando depend√™ncias..."
    
    # Backend
    cd "$INSTALL_DIR/backend"
    sudo -u $USER_NAME npm install --force
    
    # Frontend
    cd "$INSTALL_DIR/frontend"
    sudo -u $USER_NAME npm install --force
    
    log "Depend√™ncias atualizadas"
}

# Fazer build
build_application() {
    log "Fazendo build da aplica√ß√£o..."
    
    # Build do backend
    cd "$INSTALL_DIR/backend"
    sudo -u $USER_NAME npm run build
    
    # Build do frontend
    cd "$INSTALL_DIR/frontend"
    sudo -u $USER_NAME npm run build
    
    log "Build conclu√≠do"
}

# Executar migra√ß√µes
run_migrations() {
    log "Executando migra√ß√µes do banco..."
    
    cd "$INSTALL_DIR/backend"
    sudo -u $USER_NAME npm run db:migrate
    
    log "Migra√ß√µes executadas"
}

# Iniciar servi√ßos
start_services() {
    log "Iniciando servi√ßos..."
    
    # Iniciar PM2
    cd "$INSTALL_DIR"
    sudo -u $USER_NAME pm2 start ecosystem.config.js
    
    # Recarregar Nginx
    sudo systemctl reload nginx
    
    log "Servi√ßos iniciados"
}

# Verificar sa√∫de da aplica√ß√£o
health_check() {
    log "Verificando sa√∫de da aplica√ß√£o..."
    
    sleep 10
    
    # Verificar se o backend est√° respondendo
    if curl -f -s http://localhost:8080/api/auth/refresh > /dev/null; then
        log "‚úÖ Backend est√° funcionando"
    else
        warning "‚ùå Backend n√£o est√° respondendo"
    fi
    
    # Verificar PM2
    sudo -u $USER_NAME pm2 list
}

# Limpar backups antigos (manter apenas os 5 mais recentes)
cleanup_old_backups() {
    log "Limpando backups antigos..."
    
    # Manter apenas os 5 backups mais recentes
    ls -dt /opt/atendechat-backup-* 2>/dev/null | tail -n +6 | sudo xargs rm -rf
    
    log "Limpeza conclu√≠da"
}

# Menu de op√ß√µes
show_menu() {
    echo ""
    echo "üîÑ Atualizador do Atendechat"
    echo "============================"
    echo ""
    echo "1. Atualiza√ß√£o completa (recomendado)"
    echo "2. Apenas atualizar c√≥digo"
    echo "3. Apenas executar migra√ß√µes"
    echo "4. Restaurar backup"
    echo "5. Ver logs"
    echo "0. Sair"
    echo ""
    
    read -p "Escolha uma op√ß√£o (0-5): " -n 1 -r
    echo
    
    case $REPLY in
        1)
            full_update
            ;;
        2)
            code_only_update
            ;;
        3)
            migrations_only
            ;;
        4)
            restore_backup
            ;;
        5)
            show_logs
            ;;
        0)
            echo "üëã Saindo..."
            exit 0
            ;;
        *)
            error "Op√ß√£o inv√°lida"
            ;;
    esac
}

# Atualiza√ß√£o completa
full_update() {
    log "Iniciando atualiza√ß√£o completa..."
    
    check_installation
    backup_configs
    stop_services
    update_code
    restore_configs
    update_dependencies
    build_application
    run_migrations
    start_services
    health_check
    cleanup_old_backups
    
    echo ""
    echo "üéâ Atualiza√ß√£o conclu√≠da com sucesso!"
    echo "====================================="
    echo ""
    echo "üìã Backup salvo em: $BACKUP_DIR"
    echo "üìä Status: atendechat-status"
    echo "üìã Logs: atendechat-logs"
    echo ""
}

# Atualiza√ß√£o apenas do c√≥digo
code_only_update() {
    log "Atualizando apenas o c√≥digo..."
    
    check_installation
    stop_services
    update_code
    start_services
    health_check
    
    log "C√≥digo atualizado"
}

# Apenas migra√ß√µes
migrations_only() {
    log "Executando apenas migra√ß√µes..."
    
    check_installation
    run_migrations
    
    log "Migra√ß√µes executadas"
}

# Restaurar backup
restore_backup() {
    echo "üìã Backups dispon√≠veis:"
    ls -la /opt/atendechat-backup-* 2>/dev/null || echo "Nenhum backup encontrado"
    echo ""
    
    read -p "Digite o caminho completo do backup para restaurar: " backup_path
    
    if [[ ! -d "$backup_path" ]]; then
        error "Backup n√£o encontrado: $backup_path"
    fi
    
    log "Restaurando backup de: $backup_path"
    
    stop_services
    
    # Restaurar configura√ß√µes
    sudo cp "$backup_path/backend.env" "$INSTALL_DIR/backend/.env"
    sudo cp "$backup_path/frontend.env" "$INSTALL_DIR/frontend/.env"
    
    # Restaurar banco de dados
    if [[ -f "$backup_path/database.sql" ]]; then
        DB_NAME=$(grep "DB_NAME" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2)
        sudo -u postgres psql "$DB_NAME" < "$backup_path/database.sql"
    fi
    
    start_services
    
    log "Backup restaurado"
}

# Mostrar logs
show_logs() {
    sudo -u $USER_NAME pm2 logs --lines 100
}

# Fun√ß√£o principal
main() {
    if [[ $# -eq 0 ]]; then
        show_menu
    else
        case $1 in
            --full)
                full_update
                ;;
            --code-only)
                code_only_update
                ;;
            --migrations)
                migrations_only
                ;;
            *)
                echo "Uso: $0 [--full|--code-only|--migrations]"
                exit 1
                ;;
        esac
    fi
}

# Executar fun√ß√£o principal
main "$@"
