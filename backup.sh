#!/bin/bash

# Script de Backup do Atendechat
# Faz backup completo do sistema

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Vari√°veis
INSTALL_DIR="/opt/atendechat"
BACKUP_BASE_DIR="/opt/backups/atendechat"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="$BACKUP_BASE_DIR/$DATE"
USER_NAME="atendechat"

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERRO] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[AVISO] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Verificar se a instala√ß√£o existe
check_installation() {
    if [[ ! -d "$INSTALL_DIR" ]]; then
        error "Atendechat n√£o est√° instalado em $INSTALL_DIR"
    fi
    
    if [[ ! -f "$INSTALL_DIR/backend/.env" ]]; then
        error "Arquivo de configura√ß√£o n√£o encontrado"
    fi
    
    log "Instala√ß√£o encontrada em $INSTALL_DIR"
}

# Criar diret√≥rio de backup
create_backup_dir() {
    log "Criando diret√≥rio de backup: $BACKUP_DIR"
    
    sudo mkdir -p "$BACKUP_DIR"
    sudo mkdir -p "$BACKUP_DIR/configs"
    sudo mkdir -p "$BACKUP_DIR/database"
    sudo mkdir -p "$BACKUP_DIR/files"
    sudo mkdir -p "$BACKUP_DIR/logs"
}

# Backup das configura√ß√µes
backup_configs() {
    log "Fazendo backup das configura√ß√µes..."
    
    # Arquivos .env
    sudo cp "$INSTALL_DIR/backend/.env" "$BACKUP_DIR/configs/backend.env"
    sudo cp "$INSTALL_DIR/frontend/.env" "$BACKUP_DIR/configs/frontend.env"
    
    # Configura√ß√£o do PM2
    if [[ -f "$INSTALL_DIR/ecosystem.config.js" ]]; then
        sudo cp "$INSTALL_DIR/ecosystem.config.js" "$BACKUP_DIR/configs/"
    fi
    
    # Configura√ß√£o do Nginx
    DOMAIN=$(grep "FRONTEND_URL" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2 | sed 's/https:\/\///')
    if [[ -f "/etc/nginx/sites-available/$DOMAIN" ]]; then
        sudo cp "/etc/nginx/sites-available/$DOMAIN" "$BACKUP_DIR/configs/nginx.conf"
    fi
    
    # Certificados SSL
    if [[ -d "/etc/letsencrypt/live/$DOMAIN" ]]; then
        sudo cp -r "/etc/letsencrypt/live/$DOMAIN" "$BACKUP_DIR/configs/ssl/"
    fi
    
    log "Configura√ß√µes salvas"
}

# Backup do banco de dados
backup_database() {
    log "Fazendo backup do banco de dados..."
    
    # Ler configura√ß√µes do banco
    DB_NAME=$(grep "DB_NAME" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2)
    DB_USER=$(grep "DB_USER" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2)
    
    # Backup completo
    sudo -u postgres pg_dump "$DB_NAME" > "$BACKUP_DIR/database/full_backup.sql"
    
    # Backup apenas da estrutura
    sudo -u postgres pg_dump --schema-only "$DB_NAME" > "$BACKUP_DIR/database/schema_only.sql"
    
    # Backup apenas dos dados
    sudo -u postgres pg_dump --data-only "$DB_NAME" > "$BACKUP_DIR/database/data_only.sql"
    
    # Informa√ß√µes do banco
    echo "Database: $DB_NAME" > "$BACKUP_DIR/database/info.txt"
    echo "User: $DB_USER" >> "$BACKUP_DIR/database/info.txt"
    echo "Backup Date: $(date)" >> "$BACKUP_DIR/database/info.txt"
    
    log "Backup do banco de dados conclu√≠do"
}

# Backup dos arquivos
backup_files() {
    log "Fazendo backup dos arquivos..."
    
    # Pasta public (arquivos enviados)
    if [[ -d "$INSTALL_DIR/backend/public" ]]; then
        sudo cp -r "$INSTALL_DIR/backend/public" "$BACKUP_DIR/files/"
        log "Arquivos p√∫blicos salvos"
    fi
    
    # Certificados personalizados (se houver)
    if [[ -d "$INSTALL_DIR/backend/certs" ]]; then
        sudo cp -r "$INSTALL_DIR/backend/certs" "$BACKUP_DIR/files/"
        log "Certificados salvos"
    fi
    
    log "Backup dos arquivos conclu√≠do"
}

# Backup dos logs
backup_logs() {
    log "Fazendo backup dos logs..."
    
    # Logs do PM2
    if [[ -d "$INSTALL_DIR/logs" ]]; then
        sudo cp -r "$INSTALL_DIR/logs" "$BACKUP_DIR/logs/pm2/"
    fi
    
    # Logs do Nginx
    if [[ -f "/var/log/nginx/access.log" ]]; then
        sudo cp "/var/log/nginx/access.log" "$BACKUP_DIR/logs/nginx_access.log"
    fi
    
    if [[ -f "/var/log/nginx/error.log" ]]; then
        sudo cp "/var/log/nginx/error.log" "$BACKUP_DIR/logs/nginx_error.log"
    fi
    
    # Logs do sistema
    sudo journalctl -u nginx --since "1 week ago" > "$BACKUP_DIR/logs/nginx_journal.log"
    sudo journalctl -u postgresql --since "1 week ago" > "$BACKUP_DIR/logs/postgresql_journal.log"
    sudo journalctl -u redis-server --since "1 week ago" > "$BACKUP_DIR/logs/redis_journal.log"
    
    log "Backup dos logs conclu√≠do"
}

# Criar arquivo de informa√ß√µes do backup
create_backup_info() {
    log "Criando arquivo de informa√ß√µes do backup..."
    
    cat > "$BACKUP_DIR/backup_info.txt" << EOF
Backup do Atendechat
===================

Data do Backup: $(date)
Vers√£o do Sistema: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)
Usu√°rio: $(whoami)

Diret√≥rio de Instala√ß√£o: $INSTALL_DIR
Diret√≥rio de Backup: $BACKUP_DIR

Servi√ßos:
- Node.js: $(node --version)
- NPM: $(npm --version)
- PostgreSQL: $(sudo -u postgres psql --version)
- Redis: $(redis-server --version)
- Nginx: $(nginx -v 2>&1)
- PM2: $(pm2 --version)

Status dos Servi√ßos:
$(sudo systemctl is-active nginx postgresql redis-server)

Espa√ßo em Disco:
$(df -h)

Tamanho do Backup:
$(du -sh $BACKUP_DIR)
EOF
    
    log "Arquivo de informa√ß√µes criado"
}

# Compactar backup
compress_backup() {
    log "Compactando backup..."
    
    cd "$BACKUP_BASE_DIR"
    sudo tar -czf "atendechat_backup_$DATE.tar.gz" "$DATE"
    
    # Remover diret√≥rio n√£o compactado
    sudo rm -rf "$DATE"
    
    COMPRESSED_FILE="$BACKUP_BASE_DIR/atendechat_backup_$DATE.tar.gz"
    BACKUP_SIZE=$(du -sh "$COMPRESSED_FILE" | cut -f1)
    
    log "Backup compactado: $COMPRESSED_FILE ($BACKUP_SIZE)"
}

# Limpar backups antigos
cleanup_old_backups() {
    log "Limpando backups antigos..."
    
    # Manter apenas os 10 backups mais recentes
    cd "$BACKUP_BASE_DIR"
    ls -t atendechat_backup_*.tar.gz 2>/dev/null | tail -n +11 | sudo xargs rm -f
    
    log "Limpeza conclu√≠da"
}

# Enviar backup para armazenamento remoto (opcional)
upload_backup() {
    if [[ -n "$BACKUP_REMOTE_PATH" ]]; then
        log "Enviando backup para armazenamento remoto..."
        
        # Exemplo para rsync
        # rsync -avz "$COMPRESSED_FILE" "$BACKUP_REMOTE_PATH"
        
        # Exemplo para AWS S3
        # aws s3 cp "$COMPRESSED_FILE" "s3://seu-bucket/backups/"
        
        log "Backup enviado para armazenamento remoto"
    fi
}

# Verificar integridade do backup
verify_backup() {
    log "Verificando integridade do backup..."
    
    if [[ -f "$COMPRESSED_FILE" ]]; then
        # Testar se o arquivo tar est√° √≠ntegro
        if sudo tar -tzf "$COMPRESSED_FILE" > /dev/null; then
            log "‚úÖ Backup √≠ntegro"
        else
            error "‚ùå Backup corrompido"
        fi
    else
        error "Arquivo de backup n√£o encontrado"
    fi
}

# Backup completo
full_backup() {
    log "Iniciando backup completo do Atendechat..."
    
    check_installation
    create_backup_dir
    backup_configs
    backup_database
    backup_files
    backup_logs
    create_backup_info
    compress_backup
    verify_backup
    cleanup_old_backups
    upload_backup
    
    echo ""
    echo "üéâ Backup conclu√≠do com sucesso!"
    echo "================================"
    echo ""
    echo "üìÅ Arquivo: $COMPRESSED_FILE"
    echo "üìä Tamanho: $BACKUP_SIZE"
    echo "üìÖ Data: $(date)"
    echo ""
    echo "üìã Para restaurar:"
    echo "   1. Extrair: tar -xzf $COMPRESSED_FILE"
    echo "   2. Executar: ./restore.sh [caminho_do_backup]"
    echo ""
}

# Backup apenas do banco
database_only_backup() {
    log "Fazendo backup apenas do banco de dados..."
    
    check_installation
    sudo mkdir -p "$BACKUP_BASE_DIR"
    
    DB_NAME=$(grep "DB_NAME" "$INSTALL_DIR/backend/.env" | cut -d'=' -f2)
    DB_BACKUP_FILE="$BACKUP_BASE_DIR/database_backup_$DATE.sql"
    
    sudo -u postgres pg_dump "$DB_NAME" > "$DB_BACKUP_FILE"
    
    log "Backup do banco salvo em: $DB_BACKUP_FILE"
}

# Menu de op√ß√µes
show_menu() {
    echo ""
    echo "üíæ Sistema de Backup do Atendechat"
    echo "=================================="
    echo ""
    echo "1. Backup completo (recomendado)"
    echo "2. Backup apenas do banco de dados"
    echo "3. Listar backups existentes"
    echo "4. Verificar √∫ltimo backup"
    echo "5. Limpar backups antigos"
    echo "0. Sair"
    echo ""
    
    read -p "Escolha uma op√ß√£o (0-5): " -n 1 -r
    echo
    
    case $REPLY in
        1)
            full_backup
            ;;
        2)
            database_only_backup
            ;;
        3)
            list_backups
            ;;
        4)
            verify_last_backup
            ;;
        5)
            cleanup_old_backups
            ;;
        0)
            echo "üëã Saindo..."
            exit 0
            ;;
        *)
            error "Op√ß√£o inv√°lida"
            ;;
    esac
}

# Listar backups
list_backups() {
    echo ""
    echo "üìã Backups dispon√≠veis:"
    echo "======================="
    
    if [[ -d "$BACKUP_BASE_DIR" ]]; then
        ls -lah "$BACKUP_BASE_DIR"/atendechat_backup_*.tar.gz 2>/dev/null || echo "Nenhum backup encontrado"
    else
        echo "Diret√≥rio de backup n√£o existe"
    fi
    echo ""
}

# Verificar √∫ltimo backup
verify_last_backup() {
    LAST_BACKUP=$(ls -t "$BACKUP_BASE_DIR"/atendechat_backup_*.tar.gz 2>/dev/null | head -n1)
    
    if [[ -n "$LAST_BACKUP" ]]; then
        log "Verificando √∫ltimo backup: $LAST_BACKUP"
        
        if sudo tar -tzf "$LAST_BACKUP" > /dev/null; then
            log "‚úÖ √öltimo backup est√° √≠ntegro"
        else
            error "‚ùå √öltimo backup est√° corrompido"
        fi
    else
        warning "Nenhum backup encontrado"
    fi
}

# Fun√ß√£o principal
main() {
    # Criar diret√≥rio base de backups se n√£o existir
    sudo mkdir -p "$BACKUP_BASE_DIR"
    
    if [[ $# -eq 0 ]]; then
        show_menu
    else
        case $1 in
            --full)
                full_backup
                ;;
            --database)
                database_only_backup
                ;;
            --list)
                list_backups
                ;;
            --verify)
                verify_last_backup
                ;;
            *)
                echo "Uso: $0 [--full|--database|--list|--verify]"
                exit 1
                ;;
        esac
    fi
}

# Executar fun√ß√£o principal
main "$@"
